- The Strategy pattern is essentially just using composition over inheritance.

- Classes can be represented as specific composition of algorithms (strategies) which we simply gave a particular name.

- There are 2 flavors of Observer pattern:
  - Context is provided in 'update' method (problem: all subscribers can be notified with unnecessary info);
  - Concrete observable implementation is injected into subscribers (problem: coupling to concrete implementations + more unnecessary info for subscribers).

- Decorator pattern:
  - Can help us avoid class explosion;
  - Should be used in case when overridden methods have substantial differences in their behavior.
  - We need to track logical coherence when creating decorators: 'is-a' relationship should be sensible.

- We PROBABLY may use inheritance ONLY if we hope to achieve the following 2 goals:
  - Code reuse from a base class;
  - Polymorphism.
  In the rest of situations we should definitely prefer using composition.

- There is a confusion about different Factory patterns: https://refactoring.guru/design-patterns/factory-comparison
 
- Command pattern is similar to Strategy pattern, however:
  - Commands return void;
  - Usually commands support 'unexecute' behavior;
  - Strategies are not meant to (but, of course, could) be collected in queues and executed in batches unlike commands.

- Facade pattern is intended to provide limited functionality to a complex subsystem. If a client wants more, he should dive into subsystem internals.

- Proxy looks very similar to Decorator, however, the main difference is in the intent: control the access to the original object.
  Usually, proxies create and manage the whole life cycle of their services. On rare occasions, a service is passed to the proxy via a constructor.
  Besides, Proxy has a reference on the implementation and not on the original interface (which it also implements).

 - Bridge pattern as well as Strategy pattern are two essential patterns in OOP. Bridge can be considered as an extended Strategy in case when
  'Abstraction' part also has hierarchy. Both can be treated as 'Favor composition over inheritance' rule.